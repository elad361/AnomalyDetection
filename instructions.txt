אבן דרך 1 – ספריית קוד לצורך גילוי חריגות
מיני-משימה – לימוד עצמי – GIT
לפני שנתחיל, לימדו לעבוד עם control version .זהו לא חומר לימוד אקדמי, אלא כלי. עם כלים של
control version אתם יכולים לשמור את הקוד שלכם בענן, לעבוד במקביל עם שותפים ולמזג את הקוד
שכתבו, לחזור לגרסאות קודמות ועוד. מערכת GIT הפכה בשנים האחרונות לפופולרית ביותר, ולכן עליכם
להכיר אותה )/com.scm-git://https .)אחד משרתי האחסון הפופולריים נקרא GIThub.
קיימים לא מעט tutorials לשימוש ב GIT .אולם, הדרך הטובה ביותר לדעתי ללמוד את הכלי היא להתנסות
איתו. צרו עם השותפים פרויקט קטן ב ++C בסגנון “world hello “ותשתפשפו עליו בכל הקשור להעלאה,
הורדה, עדכון, מיזוג של קוד וכדומה. כאשר אתם מרגישים שהשימוש בכלי כבר טבעי לכם, תוכלו להתחיל
את הפרויקט. לאורך השנה, עליכם להשתמש בכלי זה.
ספריית קוד לצורך גילוי חריגות
בפרויקט זה נממש גלאי חריגות )Detector Anomaly )פשוט המבוסס על שיטות סטטיסטיות פשוטות.
לשם כך נצטרך להיעזר בספריית קוד שאותה נממש באבן דרך זו. עליכם לממש את הפונקציות הבאות
:הבא anomaly_detection_util.h הקובץ עבור anomaly_detection_util.cpp בקובץ
// returns the variance of X and Y
float var(float* x, int size);
// returns the covariance of X and Y
float cov(float* x, float* y, int size);
// returns the Pearson correlation coefficient of X and Y
float pearson(float* x, float* y, int size);
class Line{
public:
const float a,b;
Line(float a, float b):a(a),b(b){}
float f(float x){
return a*x+b;
}
};
class Point{
public:
const float x,y;
Point(float x, float y):x(x),y(x){}
};
// performs a linear regression and return s the line equation
Line linear_reg(Point** points, int size);
// returns the deviation between point p and the line equation of the points
float dev(Point p,Point** points, int size);
// returns the deviation between point p and the line
float dev(Point p,Line l);